import app from "./app";
import { databaseService } from "./config/database";
import { logger } from "./config/logger";

const PORT = process.env.PORT || 5000;

async function startServer() {
  try {
    // Connecter √† la base de donn√©es
    await databaseService.connect();

    // D√©marrer le serveur
    const server = app.listen(PORT, () => {
      logger.info(`üöÄ Serveur d√©marr√© sur le  http://localhost:${PORT}`);
      logger.info(`üìä Environnement: ${process.env.NODE_ENV || "development"}`);
      logger.info(`üîó URL: http://localhost:${PORT}`);
      logger.info(`üìö API: http://localhost:${PORT}/api/v1`);
      logger.info(`üíö Sant√©: http://localhost:${PORT}/health`);
    });

    // Gestion de l'arr√™t gracieux
    process.on("SIGTERM", () => {
      logger.info("SIGTERM re√ßu, arr√™t gracieux du serveur...");
      server.close(async () => {
        await databaseService.disconnect();
        logger.info("Serveur arr√™t√© avec succ√®s");
        process.exit(0);
      });
    });

    process.on("SIGINT", () => {
      logger.info("SIGINT re√ßu, arr√™t gracieux du serveur...");
      server.close(async () => {
        await databaseService.disconnect();
        logger.info("Serveur arr√™t√© avec succ√®s");
        process.exit(0);
      });
    });

    // Gestion des erreurs non captur√©es
    process.on("uncaughtException", (error) => {
      logger.error("Erreur non captur√©e:", error);
      process.exit(1);
    });

    process.on("unhandledRejection", (reason, promise) => {
      logger.error("Promesse rejet√©e non g√©r√©e:", reason);
      process.exit(1);
    });
  } catch (error) {
    logger.error("Erreur lors du d√©marrage du serveur:", error);
    process.exit(1);
  }
}

// D√©marrer le serveur
startServer();
